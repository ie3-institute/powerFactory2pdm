plugins {
	id 'groovy' // groovy support
	id 'java' // java support
	id 'scala' // scala support
	id 'pmd' //code check, working on source code
	id 'com.github.spotbugs' version '4.7.0' //code check, working on byte code
	id 'com.diffplug.spotless' version '5.12.1'//code format
	id "org.sonarqube" version "3.1.1" // sonarqube
	id 'org.scoverage' version '5.0.0' // Code coverage plugin for scala
	id "com.github.maiflai.scalatest" version "0.30" // run scalatest without specific spec task
}

ext {
	javaVersion = JavaVersion.VERSION_11
	scalaVersion = '2.13'
	scalaBinaryVersion = '2.13.5'
	slf4jVersion = '1.7.30'
	circeVersion = '0.13.0'
	scriptsLocation = 'gradle' + File.separator + 'scripts' + File.separator //location of script plugins
}

apply from: scriptsLocation + 'pmd.gradle'
apply from: scriptsLocation + 'spotless.gradle'
apply from: scriptsLocation + 'checkJavaVersion.gradle'
apply from: scriptsLocation + 'spotbugs.gradle'
apply from: scriptsLocation + 'scoverage.gradle'


configurations {
	scalaCompilerPlugin
}

repositories {
	//searches in Maven Central
	mavenCentral()

	// allows github repos as dependencies
	maven { url 'https://www.jitpack.io' }

	// sonatype snapshot repo
	maven { url 'http://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {

	// json parsing
	implementation group: 'io.circe', name: "circe-generic_${scalaVersion}", version: "${circeVersion}"
	implementation group: 'io.circe', name: "circe-parser_${scalaVersion}", version: "${circeVersion}"

	// https://mvnrepository.com/artifact/org.scalameta/scalafmt-interfaces
	implementation group: 'org.scalameta', name: 'scalafmt-interfaces', version: '2.7.5'
	// https://mvnrepository.com/artifact/org.scalameta/scalafmt-dynamic
	implementation group: 'org.scalameta', name: "scalafmt-dynamic_${scalaVersion}", version: '2.7.5'

	// ieÂ³ internal repository
	compile 'com.github.ie3-institute:PowerSystemUtils:1.5.2'

	// logging
	compile "org.slf4j:slf4j-api:${slf4jVersion}"  // slf4j wrapper
	compile 'com.lmax:disruptor:3.4.3' // async logging
	compile 'org.apache.logging.log4j:log4j-api:+' // log4j
	compile 'org.apache.logging.log4j:log4j-core:+' // log4j
	compile 'org.apache.logging.log4j:log4j-slf4j-impl:+' // log4j -> slf4j

	compile "com.typesafe.scala-logging:scala-logging_${scalaVersion}:+" // akka scala logging
	compile 'com.typesafe.scala-logging:scala-logging-slf4j_2.11:2.1.2'// scala logging
	compile "org.slf4j:log4j-over-slf4j:${slf4jVersion}" // slf4j -> log4j

	// CORE Scala //
	compile "org.scala-lang:scala-library:${scalaBinaryVersion}"

	// TEST Scala //
	testCompile "org.scalatest:scalatest_${scalaVersion}:3.0.8"
	testRuntime "org.pegdown:pegdown:1.6.0" // HTML report for scalatest

	// Linter Scala //
	compile "com.sksamuel.scapegoat:scalac-scapegoat-plugin_${scalaBinaryVersion}:1.4.8" // scala scapegoat
	scalaCompilerPlugin "com.sksamuel.scapegoat:scalac-scapegoat-plugin_${scalaBinaryVersion}:1.4.8" // scala scapegoat
}

/* scapegoat hook configuration
 * https://github.com/sksamuel/scapegoat
 * using compileScala instead of tasks.withType(ScalaCompile) prevents applying scapegoat to scala test classes
 * see https://docs.gradle.org/current/userguide/scala_plugin.html#sec:configure_scala_classpath for details
 */
compileScala {
	scalaCompileOptions.additionalParameters = [
		"-Xplugin:" + configurations.scalaCompilerPlugin.asPath,
		"-P:scapegoat:dataDir:" + buildDir + "/reports/scapegoat/src/",
		"-P:scapegoat:disabledInspections:VariableShadowing",
		"-P:scapegoat:ignoredFiles:.*/SimonaConfig.scala" // see scapegoat-sbt page for this param
	]
}

// separate scapegoat report for test classes
compileTestScala {
	scalaCompileOptions.additionalParameters = [
		"-Xplugin:" + configurations.scalaCompilerPlugin.asPath,
		"-P:scapegoat:dataDir:" + buildDir + "/reports/scapegoat/testsrc/",
		"-P:scapegoat:disabledInspections:VariableShadowing"
	]
}
group = 'edu.ie3'
version = '0.1-SNAPSHOT'
description = 'powerFactory2psdm'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}